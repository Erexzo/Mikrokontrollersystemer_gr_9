/*
 * Mikro_Prosjekt_Prep.c
 *
 * Created: 12.03.2023 13:05:54
 * Author : anjo9
 */ 


#include <avr/io.h>
#include "ADC_v1.h"
#include "USART_v1.h"


#define PERIOD_EXAMPLE_VALUE (0x0400) //Maks verdi på PWM, eller oppløsning
#define DUTY_CYCLE_EXAMPLE_VALUE (0x0000) //Ikke så sktuell her, oppdateres av ADC


/* RTC Period */
#define F_CPU 4000000UL
#define RTC_PERIOD (511)
#define USART3_BAUD_RATE(BAUD_RATE) ((float)(F_CPU * 64 / (16 * (float)BAUD_RATE)) + 0.5)
//baud rate convertion
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>

uint32_t dutyCycle = 0;

uint16_t adcVal;
void ADC0_init(void);
uint16_t ADC0_read(void);


void TCA0_init(void);
void PORT_init(void);

long map(long x, long in_min, long in_max, long out_min, long out_max);



long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


void TCA0_init(void)
{
	/* set waveform output on PORT A */
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
	
	TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm /* enable compare channel 0 */
	| TCA_SINGLE_WGMODE_DSBOTTOM_gc; /* set dual-slope PWM mode */

	/* disable event counting */
	//TCA0.SINGLE.EVCTRL &= ~(TCA_SINGLE_CNTAEI_bm);

	/* set PWM frequency and duty cycle (50%) */
	TCA0.SINGLE.PERBUF = PERIOD_EXAMPLE_VALUE;
	TCA0.SINGLE.CMP0BUF = dutyCycle;

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV4_gc /* set clock source
	(sys_clk/4) */
	| TCA_SINGLE_ENABLE_bm; /* start timer */
}
void PORT_init(void)
{
	/* set pin 0 of PORT A as output */
	PORTD.DIR |= PIN0_bm;
}


int main(void)
{
	PORT_init();

	TCA0_init();
	
	
	/* Configure switch as input */
	PORTB.DIRCLR = PIN2_bm;
	/* Enable the internal pull-up for PB2 */
	PORTB.PIN2CTRL |= PORT_PULLUPEN_bm;
	USART3_init(); //starter USART
	ADC0_init();
	adcVal = ADC0_read();

	int PWMVal = 750;
	int PWMMax = 1250;
	int PWMMin = 250;


	/* Replace with your application code */
	while (1)
	{
	
	printf("ADC reading: %d\n\r", adcVal);
	//_delay_ms(10);
	
	//map(adcVal, 0, 1023, 0, 0FFF)
	
	if (ADC0.INTFLAGS & ADC_RESRDY_bm) {
		adcVal = ADC0_read();
		PWMVal = adcVal + 250;
		TCA0.SINGLE.CMP0BUF=PWMVal;
		}
	}
	//printf("ADC reading: %d\n\r", TCA0.SINGLE.CMP0);
}
