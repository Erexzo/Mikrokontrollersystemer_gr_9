//OPPSETT

/* RTC Period */
#define F_CPU 4000000UL //Setter CPU hastighet
#define RTC_PERIOD (511) //RTC periode

//Inkluderer nødvendige standardbilioteker
#include <avr/io.h> 
#include <avr/wdt.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>
#include <time.h>

//Inkluderer tilleggskode
#include "USART_v1.h"
#include "ADC_v1.h"

uint16_t counter = 0;

uint16_t counterFan1 = 0;
uint16_t counterFan2 = 0;

//Kaller på funksjoner
long map(long x, long in_min, long in_max, long out_min, long out_max); //Map funksjon
void tempReading(uint16_t adcTemp, uint16_t counter); //Temperatur-avlesning
void fanVoltageReading(uint16_t adcFanPSU, uint16_t counter); //Spenningsavlesning vifte PSU
void adrVoltageReading(uint16_t adcAvrPSU, uint16_t counter); //Spenningsavlesning ADR PSU
void wdrAlert(void);


//FUNKSJONER:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; //Mapper inngangsverdier til nye utgangsverdier
}



void tempReading(uint16_t adcTemp, uint16_t counter) { //Funksjon for temperatur-avesning
	float reading = adcTemp; //Leser av ADC
	float voltage = (reading*5)/1023; //Bergener utgangsspenningnen til temp sensor
	float tempC = (voltage-0.5)*100; //Konvererterer denne spenningen til temperatur i celcius
	
	int tempPrint = round(tempC); //Avrunder temperaturen til heltallsverdi
	printf("Grader i celsius: %d\n", tempPrint); //Printer temperaturen over USART
	//printf("ADC TEMP: %u\n", adcTemp);
}


void fanVoltageReading(uint16_t adcFanPSU, uint16_t counter) //Funksjon for spenningsavlesning
{
	int fanPSUvoltage = map(adcFanPSU,0,1023,0,12); //Mapper avlest ADC inngangsnivå til korrisponderende spenningsverdi
	
	//long voltageFanPSU = (adcFanPSU*12)/1023; //Bergener utgangsspenningnen til temp sensor	
	printf("Fan PSU voltage: %d\n", fanPSUvoltage); //Printer resultatet
	//printf("ADC FAN PSU: %i\n", adcFanPSU);
}

void adrVoltageReading(uint16_t adcAvrPSU, uint16_t counter) //Funksjon for spenningsavlesning
{
	int AVRvoltage = map(adcAvrPSU,0,1023,0,5); //Mapper avlest ADC inngangsnivå til korrisponderende spenningsverdi
	printf("ADR PSU Voltage: %d\n\r", AVRvoltage); //Printer resultatet
	//printf("ADC AVR PSU: %i\n", adcAvrPSU);
}

void wdrAlert(void) //WDR USART alert function
{
	//Print if WDT reset occured (checking watch dog Reset flag)
	if (RSTCTRL.RSTFR & RSTCTRL_WDRF_bm)
	{
		printf("WDT Reset\n"); //USART print
	}
}

///HOVEDPROGRAM

int main(void) //Hovedfunksjons-loop
{
	USART3_init(); //starter USART
	ADC0_init(); //Starter ADC
	
	//Enable WDT
	wdt_enable(WDT_PERIOD_8KCLK_gc); //Wait for 8K cycles (8.2s) before reset
	wdrAlert(); //USART notification of WDT reset
	
	counterFan1 = 0;
	counterFan2 = 0;
	
	while (1)
	{
		//counter++; //Teller opp hver gang while loop kjører.


		//Her routes ADC inputs til riktig funksjon
		uint16_t adcTemp = ADC0_read(7); //Mapper riktig input til temperatur-avlesnings funksjon
		uint16_t adcFanPSU = ADC0_read(5); //Mapper riktig input til Fan PSU voltmeter funksjon
		uint16_t adcAvrPSU = ADC0_read(4); //Mapper riktig input til AVR PSU voltmeter funksjon
		
		uint16_t speedMon1 = ADC0_read(0); //Mapper riktig input til viftehastighet for vifte 1
		uint16_t speedMon2 = ADC0_read(1); //Mapper riktig input til viftehastighet for vifte 2
		
		//printf("Fan 1 speed ADC: %i\n", speedMon1);		
		//printf("Fan 2 speed ADC: %i\n", speedMon2);
		
		if (speedMon1 < 560)
		{
			counterFan1++;
			//printf("Fan 1 counts: %i\n", counterFan1);
		}
		//_delay_ms(500);

		if (speedMon2 < 730)
		{
			counterFan2++;
			//printf("Fan 2 counts: %i\n", counterFan2);
		}
		//_delay_ms(500);
		
		
		//tempReading(adcTemp, counter); //Kaller på temperaturfunksjonen
		//fanVoltageReading(adcFanPSU, counter); //Kaller på spennnings-avlesnings funksjonen
		//adrVoltageReading(adcAvrPSU, counter); //Kaller på spennnings-avlesnings funksjonen
		//_delay_ms(1000); //Stabilitetsdelay
		
		wdt_reset(); //Reset WDT
	}
}
